apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    //配置自动签名
    signingConfigs {
        config {
            storeFile file("../universal/BasicProject.jks")
            storePassword '123456'
            keyAlias = 'BasicProjectRelease'
            keyPassword '123456'
        }
    }

    compileSdkVersion compile_sdk_version
    buildToolsVersion build_tools_version
    defaultConfig {
        applicationId "com.android.kotlin"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        multiDexEnabled true
        versionCode 100001
        versionName "1.0.0(001)"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

    }
    buildTypes {
        release {
            zipAlignEnabled true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config  //自动签名
        }
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config  //自动签名
        }
    }

    //删除之前生成的APK
    delete("../kotlin/build/outputs/apk")
    //修改生成的APK名字
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            def fileName    //apk文件名
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                def productFlavor = ""
//                if (variant.productFlavors != null && variant.productFlavors.size() > 0) {
//                    productFlavor = "${variant.productFlavors[0].name}"
//                }
//                fileName = "Kotlin_${productFlavor}_${variant.buildType.name}_v${defaultConfig.versionName}.apk"
                fileName = "Kotlin_${variant.buildType.name}_v${defaultConfig.versionName}.apk"
                outputFileName = fileName
            }
        }
    }
}

static def releaseTime() {
    return new Date().format("MMddHHmm", TimeZone.getTimeZone("GMT+8"))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':universal')
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "com.android.support.test:runner:$test_runner_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$test_espresso_version"
    //leakcanary检测内存泄漏
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$leakcanary_version"

    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //Anko库，包含下方四个部分
//    implementation "org.jetbrains.anko:anko:$anko_version"  //待验证
//    //Anko Commons
    implementation "org.jetbrains.anko:anko-common:$anko_version"
//    //Anko Layouts
//    implementation "org.jetbrains.anko:anko-sdk25:$anko_version" // sdk15, sdk19, sdk21, sdk23 are also available
//    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
//    //Coroutine listeners for Anko Layouts
//    implementation "org.jetbrains.anko:anko-sdk25-coroutines:$anko_version"
//    implementation "org.jetbrains.anko:anko-appcompat-v7-coroutines:$anko_version"
//    //Anko SQLite
//    implementation "org.jetbrains.anko:anko-sqlite:$anko_version"

}
